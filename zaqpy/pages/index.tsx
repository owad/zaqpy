import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'

import { useCallback, useEffect, useState } from 'react'
import React from 'react'

import {Checkbox, Divider, Header, Icon, Image, Input, Item, List, Segment} from 'semantic-ui-react'

import * as sqlite3 from 'sqlite3'

type Item = {
  id: number;
  label: string;
  checked: boolean;
};

type Event = {
  key: string;
  target: {
    value: any
  }
}


// This function gets called at build time
export async function getStaticProps() {
  const db = new sqlite3.Database("test.db")
  const item: Item = {id: 1, checked: false, label: "Bla"}

  db.run(`
    CREATE TABLE IF NOT EXISTS items
    (
        id INT NOT NULL PRIMARY KEY,
        checked BOOLEAN NOT NULL DEFAULT FALSE,
        label TEXT NOT NULL DEFAULT ''
    )`,
    function() {
      console.log("Boom");
    }
  );

  db.run('INSERT INTO items VALUES ($item)', {
      $item: item
    }, function() {
      console.log("BOOM");
    }
  );

  // Call an external API endpoint to get posts
  // const res = await fetch('https://.../posts')
  // const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  // return {
  //   props: {
  //     items,
  //   },
  // }

  const items = [
    {id: 1, checked: false, label: "Chleb"},
    {id: 2, checked: false, label: "Mleko"},
    {id: 3, checked: false, label: "Jajka"},
  ];

  return {
    props: {
      initItems: items
    }
  }
}

// @ts-ignore
const Home: NextPage = ({ initItems }) => {
  const [items, setItems] = useState(initItems)

  function handleCheckbox(clickedItem: Item) {
    const updatedItems = items.map((item: Item) => {
      if (item.id === clickedItem.id) {
        const updatedItem = {
          ...item,
          checked: !item.checked,
        };
        return updatedItem;
      }
      return item;
    });
    setItems(updatedItems);
  }

  function handleInput(clickedItem: Item, newValue: string) {
    const updatedItems = items.map((item: Item) => {
      if (item.id === clickedItem.id) {
        const updatedItem = {
          ...item,
          label: newValue,
        };
        return updatedItem;
      }
      return item;
    });
    setItems(updatedItems);

  }

  function handleAddItem(e: Event) {
    if (e.key === 'Enter') {
      setItems([
        ...items,
        {id: items.length + 1, checked: false, label: e.target.value}
      ])
      e.target.value = "";
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Segment.Group compact>
          <Segment>
            <Header size='medium'>Zaqpy</Header>
            <List>
              {items.filter((item: Item) => !item.checked).map((item: Item) => (
                <List.Item key={item.id}>
                  <Checkbox checked={item.checked} onChange={() => handleCheckbox(item)}/>
                  <Input transparent defaultValue={item.label} onChange={(e) => handleInput(item,  e.target.value)}/>
                </List.Item>
              ))}
              <List.Item key="plus">
                <Input icon="plus" iconPosition="left" transparent placeholder="new item..." onKeyDown={(e: Event) => handleAddItem(e)} />
              </List.Item>
              <Divider />
              {items.filter((item: Item) => item.checked).map((item: Item) => (
                <List.Item key={item.id}>
                  <Checkbox checked={item.checked} onChange={() => handleCheckbox(item)}/>
                  <Input transparent defaultValue={item.label} disabled />
                </List.Item>
              ))}
            </List>
          </Segment>
        </Segment.Group>
      </main>
    </div>
  )
}

export default Home
